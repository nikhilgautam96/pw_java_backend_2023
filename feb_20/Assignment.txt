1. What is Inheritance in java ?
    - Inheritance is one the 4-pillars of OOPS in java.
    - It is a mechanism that allows one class(Child/Sub class) to to inherit the properties 
        and methods of another class (Parent/Super class).
    - The technique of creating a new class by using an existing class functionality.
    - To implement inheritance in java we either use "extends" or "implements" keyword.

2. What is superclass and subclass ?
    - Superclass : The class that gets inherited. (base/parent class).
      Subclass : The class that inherits another class's properties and behaviour.
                (derived/child class)

3. How is inheritance achieved/implemented in java ?
    - There are two ways inheritancecan be achieved in java :
    1. using "extends" keyword : 
        - it is used to achieve inheritance between two classes or two interfaces.
    2. using "implement keyword : 
        - it is used to achieve inheritance between a class and a interface.

4. What is polymorphism ?
    - It is also one of the pillars of OOPS.
    - It is the ability of an object to take on many forms or to have multiple behaviours.
    - It is achieved using method overloading, overriding.
    - 2 types : (Compile time polymorphism) & (Runtime polymorphism)

5. Differentiate between method overloading and overriding ?
    1. Method Overloading :
        - Also known as Compile time polymorphism.
        - It can be achieved with or without inheritance.
        - It means extending the existing method functionality with new functionality.
        - Errors can be caught at runtime.
        - same method name but type and number of parameters is must.
        - can have different return type and access modifiers, but they alone cannot be
            considered in achieving overloading.
    2. Method Overriding :
        - Also known as Run time polymorphism.
        - It can be achieved only with inheritance.
        - It basically means replacing the existing method functionality with new one.
        - Errors can be caught at run time only.
        - same method name, type and number of parameters.
        - Also same return type.
        - while overriding, we can increase the visibility of the overriden method
            but we cannot decrease the visibility, in the child class.

6. What is an abstraction, explain with example ?
    - The process of displaying/exposing only the essential details by ignoring the 
        irrelevant background details.
    - In Java, abstraction is achieved through the use of abstract classes and interfaces.
    eg :-
    1. using abstract classes :
    -   public abstract class Animal {
            public abstract void makeSound();
            
            public void eat() {
                System.out.println("This animal is eating.");
            }
        }
    2. using Interfaces :
    -   public interface Shape {
            public double getArea();
            public double getPerimeter();
        }

7. Difference betweeen abstract method and final method in java, explain with example ?
    - abstract method :
        . It does not include the method definition only declaration.
        . to use a abstract method we need to override it.
      Final Method :
        . It must include method definition.
        . It cannot be overriden.

8. What is the final class in java ?
    - When final is applied to a class, the class cannot be subclassed. 
    - This is often used to prevent changes to the behavior of a class or to 
        ensure that a class has a specific set of functionality that cannot be altered.
    - eg :-
        final class Animal1 {
            void sleep() {
                System.out.println("Animal is sleeping");
            }
        }
        class Tiger1 extends Animal1 { // "The type Tiger1 cannot subclass the final class Animal1"
            // void sleep() {

            // }
        }

9. Differentiate between abstraction and encapsulation ?
    Abstraction	                                     Encapsulation
Focuses on the essential characteristics of          Hides the implementation details of an object 
an object or system and ignores the irrelevant       or system from the outside world and restricts
an object or system and ignores the irrelevant       access to its internal state.
or non-essential details.                          

Achieved through the use of abstract classes         Achieved through the use of access modifiers 
and interfaces.                                      (public, private, protected) and 
                                                     getters/setters methods.
                                                     
Defines a common set of methods or properties        Groups related data and behavior into a 
that must be implemented by the classes that         single unit (class) and restricts access 
extend an abstract class or implement an             to its internal state.
interface.

Provides a way to create flexible, modular,          Helps prevent accidental modification or 
and extensible code that can be easily               misuse of an object's internal state by 
maintained and updated over time.                    enforcing a set of rules or constraints on 
                                                     how it can be accessed or modified.

Example:                                             Example: 
 . Animal abstract class with makeSound()             . Person class with private name and age 
   and eat() methods;                                   fields and public getName() and getAge() 
 . Shape interface with getArea() and                   methods; 
   getPerimeter() methods.                            . BankAccount class with private 
                                                        balance field and public deposit()
                                                         and withdraw() methods.       

10. Differentiate between Run-time and Compile-time polymorphism in java, explain with example ?
    - 



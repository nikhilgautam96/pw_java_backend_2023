Inheritance :-
    . It describes an "is-a relationship" between classes.
        ie. "B is a child of A" or "A is a parent of B"
    . It is one of the pillars of Object oriented programming.
    . It promotes reusability.
    . productivity of the code is improved.
    . In java inheritance is achieved using the "extends" keyword (to inherit classes) and
      using "implements" keyword (to inherit interfaces).
    . Whatever is there in the Parent class by default would be available to the 
      child class.
    . but the child class properties and behaviours are not available to the parent class.
    . Using the child reference we call both the parent and child class methods.
    . whereas using the parent reference we can call only Parent class methods and
        not the specialized methods of child class.
    . the class that is being inherited is called - { Super class, Base class, Parent class }
    . the class that inherits is called - { Child class, sub class, derived class }
    . Note :- 
        One Principle of OOPS should not violate the rules of the other Principles.
        eg :- if we try to access private members of parent in child, it gives error.
            bcz inheritance cannot violate the rules of polymorphism.
    . Constructors are not inherited.

    eg :-
        class Parent{
            public void methodOne() {
                System.out.println("methodOne from parent");
            }
        }
        class Child extends Parent {
            public void methodTwo() {
                System.out.println("methodTwo from child");
            }
        }
        public class TestApp{
            public static void main(String... args) {
                Parent p=new Parent();
                p.methodOne();

                Child c=new Child();
                c.methodOne();
                c.methodTwo();
            }
        }
        OUTPUT
            methodOne from parent
            methodOne from parent
            methodTwo from child

Types of Inheritance :-
    1. Single - level Inheritance
        - eg :-
                class Human { //Super class // Base class// Parent class
                    int age;
                    void sleep() {
                        age=18;
                        System.out.println("Human needs good sleep");
                        System.out.println(age);
                    }
                }
                class Student extends Human { // Child class// sub class // derived class
                    
                }
                class Inheritance1 {
                    public static void main(String[] args) { 
                    Student st=new Student();
                    st.sleep();
                    }
                }
        - eg :-
                class Human1 {
                    private String name;
                    int age;
                    Human1() {
                        System.out.println("Human class Constructor");
                    }
                    void sleep() {
                        age=18;
                        System.out.println("Human needs good sleep");
                        System.out.println(age);
                    }
                }
                class Student1 extends Human1 {
                    // public Studemt1() {
                            // super();
                    // }
                    void disp() {
                        System.out.println(" The age is : " + age);
                        // System.out.println(" The Name is : " + name);
                    }
                }
                public class Inheritance2 {
                    public static void main(String[] args) {
                        Student1 st1 = new Student1();
                        st1.sleep();
                        st1.disp();
                    }
                }
    2. Multi level Inheritance :
        - 1 child inherits a parent which in-turn inherits another parent.
    3. Hierarchical Inheritance :
        - 1 parent class can have any number of child classes.
    4. Multiple Inheritance.
        - 1 child inherits 2 or more parents at a time.
        - extending 2 classes created a "Diamond Shaped Problem".
        - java does not support Multiple inheritance.
        - We use "Interface" to achieve multiple inheritance.
        Diamond Shaped Problem :
            . Since every class has "Object" as parent class by default, and suppose a child class
              inherits 2 classes and both has Object as parent.
              now the compiler gets confused that which class's method to call and this is 
              called as Ambiguity bcz Object class method comes top this child
              via both the parents.
            . Such situation is Diamond Shaped Problem.
    5. Hybrid Inheritance.
        - It is a combination of more than 2 types of inheritances, single and multiple.
        - This can also be achieved using "interfaces" only as multiple inheritance is
          not supported by java.
        - It is combination of single, multiple and heirarchical inheritances.

Types of Methods in Inheritance :-
    1. Inherited.
        - The method which would come from parent to child due to inheritance is called
          inherited method.

    2. Overriden.
        - The method that is taken from Parent and changes the implemetation as per the needs of 
          the requirement in the child class is called "Overriden Method".
        Overriden -
            . The method in parent that is being modified in child.
        Overriding -
            . The Child class method that is changing the implementation of parent class method.
        
    3. Specialized.
        - The methods that are specific to the particular child class is specialised.

Package :-
    . A java package is a group of similar types of classes, interfaces and sub-packages.
    . usual practise to name packages in development is :-
        " domainName.companyName.projectName.featureName "
        eg :- " com.pw.calculator.Addition "
    . Categorised into 2 types :-
        1. Built-in package
            eg : { java, lang, awt, javax, swing, net, io, util, sql, etc }
        2. User Defined Package
    
    Advantages of Package in java :-
        1. Java package is used to categorize the classes and interfaces so that they 
            can be easily maintained.
        2. Java package provides access protection.
        3. Java package removes naming collision.
    eg :-
        package mypack;  
        public class Simple {  
            public static void main(String args[]){  
                System.out.println("Welcome to package");  
            }  
        }
    How to compile a java package :-
        . javac -d directory javafilename.
                
            " eg : javac -d . Simple.java "
        Explanation :
            - The " -d " switch specifies the destination where to put the generated class file. 
                You can use any directory name like " /home " (in case of Linux), 
                " d:/abc " (in case of windows) etc. 
            - If you want to keep the package within the same directory, you can use " . " (dot).
                to keep it in parent directory use " .. " .
            - using "." creates a folder with specified package name in the same directory,
                with all the ".class" files.

    How to run a package program :-
        . after compiling use the folder name (package name) and the class name like below.
            
            " eg : java mepack.Simple "

    How to Access a package from another package :-
        . There are 3 ways.
            1. import package.*;
                eg :-   package pack;  
                            public class A {  
                                public void msg(){System.out.println("Hello");
                            }  
                        }  

                        package mypack;  
                        import pack.*;  
                        class B {  
                            public static void main(String args[]) {  
                                A obj = new A();  
                                obj.msg();  
                            }  
                        }
            2. import package.classname;
                eg :-   package pack;  
                        public class A {  
                            public void msg(){System.out.println("Hello");}  
                        }

                        package mypack;  
                        import pack.A;  
                        class B {
                            public static void main(String args[]) {  
                                A obj = new A();  
                                obj.msg();  
                            }  
                        }
            3. fully qualified name.
                eg :-   package pack;  
                        public class A{  
                            public void msg(){System.out.println("Hello");}  
                        }  

                        package mypack;  
                        class B {  
                            public static void main(String args[]) {  
                                pack.A obj = new pack.A();     //using fully qualified name  
                                obj.msg();  
                            }  
                        }

        NOTE : If you import a package, all the classes and interface of that package 
               will be imported excluding the classes and interfaces of the subpackages.
               Hence, you need to import the subpackage as well.

* How to put two public classes in a package :-
    - If you want to put two public classes in a package, have two java source files 
        containing one public class, but keep the package name same.

Access Modifier :-
    . keywords that can be used to control the visibility of fields, methods, and 
      constructors in a class.
    . It can be applied to { class, method, variable, constructor }.

    Access         within          Outside class        Outside package      Outside package
   Modifier      same class         same package           subclass            non-subclass

1. public           yes                 yes                 yes                     yes
2. protected        yes                 yes                 yes                     No
3. default          yes                 yes                  No                     No
4. private          yes                  No                  No                     No

                        Visibility Decreases
                ------------------------------------>>
                public   protected   default   private 
                <<------------------------------------
                        Visibility Increases       

Rules to Override in child class :-
    1. while overriding, we can increase the visibility of the overriden method
       but we cannot decrease the visibility, in the child class.
    2. while overriding, we cannot change the return type of the overriden method
       in child class.
    3. while overriding, we cannot change the type or number of argument in method 
       prototype. it won't give error in doing so but it is not considered overriding
       but overloading.